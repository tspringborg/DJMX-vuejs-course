// Built of the back of the authors of:
// http://www.sassmeister.com/gist/7f22e44ace49b5124eec
// https://codepen.io/stowball/pen/JWoWWz?editors=0100

// GENERAL SETTINGS
$responsive-type-min-width: 375px !default;
$responsive-type-max-width: 1680px !default;


// HOW TO USE? !!!

// Single property.
// with min and max passed.
// h1 {
//   @include responsive-type(22px, 38px);
// }

// An example of adding another property in such as line height
// h2 {
//   @include responsive-type(18px, 28px);
//   @include responsive-type(1.2, 1.05, line-height);
// }

// An example of the custom breakpoints for '@' redable syntax 
// This is to avoid the map approach here: https://codepen.io/stowball/pen/JWoWWz
// h3 {
//   @include responsive-type('14px@400px', '50px@1900px');
//   @include responsive-type('1.2@400px', '1.05@1900px', line-height);
// }

// Multiple properties with same values with default
// div.box {
//   @include responsive-resize(width height, 20em, 70em, 5em, 10em);
// }

// As most min-width values will be 320px and the max value often will be the max-width of the container
// We set "smart" default values


// UTILITY FUNCTIONS //
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}


// Add `$unit` to `$value`
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
  
  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }
  
  @return $value * map-get($units, $unit);
}

// Removes unit from a value
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}


// Splits a string on a separator
@function split-str($string, $separator) {

   $index : str-index($string,  $separator);

   $str-1 : str-slice($string, 1, $index - 1);
   $str-2 : str-slice($string, $index + 1);

   @return $str-1 $str-2;
}

/// THE GOOD STUFF //
// Base Responsive resize function that the type one uses
@mixin responsive-resize($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

// Type Focus helper mixin for the resize function
@mixin responsive-type($min-value, $max-value, $properties: font-size) {
  // use the global default values based on the assumption these
  // will be contained in a block
  $min-vw: $responsive-type-min-width;
  $max-vw: $responsive-type-max-width;

  // check if value is using the "@" api syntax.
  @if ( type-of($min-value) == "string") {
    // So it is a string does it have a "@" symbol to break apart
    @if ( str-index($min-value, '@') ) {
      // split string helper
      $min-value-list : split-str($min-value, '@');
      // unquote the split and cast the string to a number
      // http://hugogiraudel.com/2014/01/15/sass-string-to-number/
      $min-value: to-number( unquote( nth($min-value-list, 1) ) );
      $min-vw: to-number( unquote( nth($min-value-list, 2) ));
    }
  }
  
  // run the same checks over the $max-value
  @if ( type-of($max-value) == "string") {
    // So it is a string does it have a "@" symbol to break apart
    @if ( str-index($max-value, '@') ) {
      $max-value-list : split-str($max-value, '@');
      $max-value: to-number( unquote( nth($max-value-list, 1) ) );
      $max-vw: to-number( unquote( nth($max-value-list, 2) ));
    }
  }
  
  // feed the shorter api back to the responsice resizer
  @include responsive-resize($properties, $min-vw, $max-vw, $min-value, $max-value);
}
